{"ast":null,"code":"var _jsxFileName = \"/home/damik/WebstormProjects/untitled1/src/App.js\";\nimport React, { Component } from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport State from \"./initialState\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = State.initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          if (this.state.direction != 'DOWN') this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          if (this.state.direction != 'UP') this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          if (this.state.direction != 'RIGHT') this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          if (this.state.direction != 'LEFT') this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 5, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 5, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 5];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 5];\n          break;\n      }\n\n      dots.shift();\n      dots.push(head);\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  countScore() {\n    return this.state.snakeDots.length;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: State.getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(State.initialState);\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 50\n      });\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Food, {\n      dot: this.state.food,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/damik/WebstormProjects/untitled1/src/App.js"],"names":["React","Component","Snake","Food","State","App","state","initialState","onKeyDown","e","window","event","keyCode","direction","setState","moveSnake","dots","snakeDots","head","length","shift","push","componentDidMount","setInterval","speed","document","onkeydown","countScore","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","food","getRandomCoordinates","enlargeSnake","increaseSpeed","alert","newSnake","unshift","snake","pop","forEach","dot","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport State from \"./initialState\";\n\n\n\n\nclass App extends Component {\n  state = State.initialState;\n\n  componentDidMount() {\n      setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onKeyDown;\n  }\n\n  countScore(){\n      return this.state.snakeDots.length;\n  }\n\n  componentDidUpdate() {\n      this.checkIfOutOfBorders();\n      this.checkIfCollapsed();\n      this.checkIfEat();\n  }\n\n    onKeyDown = (e) =>{\n      e = e || window.event;\n      switch (e.keyCode){\n          case 38:\n              if (this.state.direction != 'DOWN' ) this.setState({direction: 'UP'});\n              break;\n          case 40:\n              if (this.state.direction != 'UP' ) this.setState({direction: 'DOWN'});\n              break;\n          case 37:\n              if (this.state.direction != 'RIGHT' ) this.setState({direction: 'LEFT'});\n              break;\n          case 39:\n              if (this.state.direction != 'LEFT' ) this.setState({direction: 'RIGHT'});\n              break;\n      }\n  }\n\n\n  moveSnake = () =>{\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n          case 'RIGHT':\n              head = [head[0] + 5, head[1]]\n              break;\n          case 'LEFT':\n              head = [head[0] - 5, head[1]]\n              break;\n          case 'DOWN':\n              head = [head[0], head[1] + 5]\n              break;\n          case 'UP':\n              head = [head[0], head[1] - 5]\n              break;\n      }\n\n\n      dots.shift();\n      dots.push(head);\n      this.setState({\n          snakeDots: dots\n      })\n  }\n\n  checkIfOutOfBorders(){\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n          this.onGameOver();\n      }\n  }\n\n  checkIfEat(){\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      let food = this.state.food;\n      if (head[0] == food[0] && head[1] == food[1]){\n          this.setState({\n              food: State.getRandomCoordinates()\n          })\n          this.enlargeSnake();\n          this.increaseSpeed();\n      }\n  }\n\n  onGameOver(){\n      alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n      this.setState(State.initialState)\n  }\n\n  enlargeSnake(){\n      let newSnake = [...this.state.snakeDots];\n      newSnake.unshift([]);\n      this.setState({\n          snakeDots: newSnake\n      })\n  }\n\n  increaseSpeed(){\n      if (this.state.speed > 10){\n          this.setState({\n              speed: this.state.speed - 50\n          })\n      }\n  }\n\n  checkIfCollapsed(){\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      snake.pop();\n      snake.forEach(dot => {\n          if (head[0] == dot[0] && head[1] == dot[1]){\n              this.onGameOver();\n          }\n      })\n  }\n\n    render(){\n    return (\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}