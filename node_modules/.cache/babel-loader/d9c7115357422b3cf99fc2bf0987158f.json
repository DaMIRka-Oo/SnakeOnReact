{"ast":null,"code":"var _jsxFileName = \"/home/damik/WebstormProjects/untitled1/src/App.js\";\nimport React, { Component } from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 5) * 5;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 5) * 5;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 500,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [5, 0]]\n};\n\nfunction stopit() {\n  clearInterval(interval);\n}\n\nfunction start() {\n  interval = setInterval(App.moveSnake(), 2000);\n}\n\nfunction restart() {\n  start = 1;\n  interval = setInterval(carousel, 2000);\n}\n\nfunction playAgain() {\n  interval = setInterval(this.moveSnake, this.state.speed);\n}\n\nlet interval;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          if (this.state.direction != 'DOWN') this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          if (this.state.direction != 'UP') this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          if (this.state.direction != 'RIGHT') this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          if (this.state.direction != 'LEFT') this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 5, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 5, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 5];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 5];\n          break;\n      }\n\n      dots.shift();\n      dots.push(head);\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    interval = setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  onGameOver() {\n    // alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    clearInterval(interval);\n    this.setState(initialState);\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 50\n      });\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Food, {\n      dot: this.state.food,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, \"\\u0412\\u0430\\u0448 \\u0441\\u0447\\u0451\\u0442 \", this.state.snakeDots.length), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: playAgain(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/damik/WebstormProjects/untitled1/src/App.js"],"names":["React","Component","Snake","Food","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","stopit","clearInterval","interval","start","setInterval","App","moveSnake","restart","carousel","playAgain","state","onKeyDown","e","window","event","keyCode","setState","dots","head","length","shift","push","componentDidMount","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","enlargeSnake","increaseSpeed","newSnake","unshift","snake","pop","forEach","dot","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomCoordinates = () =>{\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random()*(max - min + 1)+min) / 5)*5\n    let y = Math.floor((Math.random()*(max - min + 1)+min) / 5)*5\n    return [x, y]\n}\n\nconst initialState = {\n    food: getRandomCoordinates(),\n    speed: 500,\n    direction: 'RIGHT',\n    snakeDots:[\n        [0, 0],\n        [5, 0]\n    ]\n\n}\n\nfunction stopit(){\n    clearInterval(interval);\n}\nfunction start(){\n    interval = setInterval(App.moveSnake(), 2000);\n}\nfunction restart(){\n    start = 1;\n    interval = setInterval(carousel, 2000);\n}\n\nfunction playAgain(){\n    interval = setInterval(this.moveSnake, this.state.speed);\n}\n\nlet interval;\n\n\n\nclass App extends Component {\n  state = initialState;\n\n  componentDidMount() {\n      interval = setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onKeyDown;\n  }\n\n\n\n  componentDidUpdate() {\n      this.checkIfOutOfBorders();\n      this.checkIfCollapsed();\n      this.checkIfEat();\n  }\n\n    onKeyDown = (e) =>{\n      e = e || window.event;\n      switch (e.keyCode){\n          case 38:\n              if (this.state.direction != 'DOWN' ) this.setState({direction: 'UP'});\n              break;\n          case 40:\n              if (this.state.direction != 'UP' ) this.setState({direction: 'DOWN'});\n              break;\n          case 37:\n              if (this.state.direction != 'RIGHT' ) this.setState({direction: 'LEFT'});\n              break;\n          case 39:\n              if (this.state.direction != 'LEFT' ) this.setState({direction: 'RIGHT'});\n              break;\n      }\n  }\n\n\n  moveSnake = () =>{\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n          case 'RIGHT':\n              head = [head[0] + 5, head[1]]\n              break;\n          case 'LEFT':\n              head = [head[0] - 5, head[1]]\n              break;\n          case 'DOWN':\n              head = [head[0], head[1] + 5]\n              break;\n          case 'UP':\n              head = [head[0], head[1] - 5]\n              break;\n      }\n\n\n      dots.shift();\n      dots.push(head);\n      this.setState({\n          snakeDots: dots\n      })\n  }\n\n  checkIfOutOfBorders(){\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n          this.onGameOver();\n      }\n  }\n\n  checkIfEat(){\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      let food = this.state.food;\n      if (head[0] == food[0] && head[1] == food[1]){\n          this.setState({\n              food: getRandomCoordinates()\n          })\n          this.enlargeSnake();\n          this.increaseSpeed();\n      }\n  }\n\n  onGameOver(){\n     // alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n\n      clearInterval(interval)\n      this.setState(initialState);\n  }\n\n\n\n\n  enlargeSnake(){\n      let newSnake = [...this.state.snakeDots];\n      newSnake.unshift([]);\n\n      this.setState({\n          snakeDots: newSnake\n      })\n  }\n\n  increaseSpeed(){\n      if (this.state.speed > 10){\n          this.setState({\n              speed: this.state.speed - 50\n          })\n      }\n  }\n\n  checkIfCollapsed(){\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      snake.pop();\n      snake.forEach(dot => {\n          if (head[0] == dot[0] && head[1] == dot[1]){\n              this.onGameOver();\n          }\n      })\n  }\n\n    render(){\n    return (\n        <div>\n            <div className=\"game-area\">\n                <Snake snakeDots={this.state.snakeDots}/>\n                <Food dot={this.state.food}/>\n            </div>\n            <h1>Ваш счёт {this.state.snakeDots.length}</h1>\n            <button onClick={playAgain()}>Начать заново</button>\n        </div>\n\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}