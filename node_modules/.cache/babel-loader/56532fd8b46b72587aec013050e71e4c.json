{"ast":null,"code":"var _jsxFileName = \"/home/damik/WebstormProjects/untitled1/src/App.js\";\nimport React, { Component } from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      food: getRandomCoordinates(),\n      speed: 500,\n      direction: 'RIGHT',\n      snakeDots: [[0, 0], [2, 0]]\n    };\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Food, {\n      dot: this.state.food,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/damik/WebstormProjects/untitled1/src/App.js"],"names":["React","Component","Snake","Food","getRandomCoordinates","min","max","x","Math","floor","random","y","App","state","food","speed","direction","snakeDots","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","componentDidMount","setInterval","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","onGameOver","alert","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomCoordinates = () =>{\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random()*(max - min + 1)+min) / 2)*2\n    let y = Math.floor((Math.random()*(max - min + 1)+min) / 2)*2\n    return [x, y]\n}\n\nclass App extends Component {\n  state={\n      food: getRandomCoordinates(),\n      speed: 500,\n      direction: 'RIGHT',\n    snakeDots:[\n        [0, 0],\n        [2, 0]\n    ]\n  }\n\n  componentDidMount() {\n      setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n      this.checkIfOutOfBorders();\n  }\n\n    onKeyDown = (e) =>{\n      e = e || window.event;\n      switch (e.keyCode){\n          case 38:\n              this.setState({direction: 'UP'});\n              break;\n          case 40:\n              this.setState({direction: 'DOWN'});\n              break;\n          case 37:\n              this.setState({direction: 'LEFT'});\n              break;\n          case 39:\n              this.setState({direction: 'RIGHT'});\n              break;\n      }\n  }\n\n\n  moveSnake = () =>{\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n          case 'RIGHT':\n              head = [head[0] + 2, head[1]]\n              break;\n          case 'LEFT':\n              head = [head[0] - 2, head[1]]\n              break;\n          case 'DOWN':\n              head = [head[0], head[1] + 2]\n              break;\n          case 'UP':\n              head = [head[0], head[1] - 2]\n              break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n          snakeDots: dots\n      })\n  }\n\n  checkIfOutOfBorders(){\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n          this.onGameOver();\n      }\n  }\n\n  onGameOver(){\n      alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n  }\n\n    render(){\n    return (\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}